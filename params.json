{"name":"Aquajs","tagline":"A Node.js framework for building microservices","body":"                                       \r\nAquajs is The Friendly & Fun Javascript Fullstack Framework for your next API/Web/Mobile/IOT/Wearables application. It is designed to give you a quick and organized way to start developing an application. We mainly try to take care of the connection points between existing popular frameworks and solve common integration problems.\r\nThe Aquqajs  framework was developed by ECX team inside Equinix. With help of Aquajs you can  build realtime web apps as a service .\r\nKey Drivers of Aquajs framework\r\nEnables developers to focus on writing reusable application logic instead of spending time building infrastructure\r\nItâ€™s designed to give a quick and organized way to start developing Applications / Services\r\nWe mainly try to take care of the connection points between existing popular module / frameworks and solve common integration problems.\r\nAquaJS is a secure and scalable layer that extends express by providing structure and convention.\r\nGetting Started \r\nInstallation\r\nFrom the command line:\r\nRun npm install -g aquajs-cli\r\ncd into working directory\r\nRun aqua create <projectname> to create new microservice\r\nOptions:\r\n--workflow to create workflow project\r\n--dir <path> to specify output directory\r\n--scheduler to create a scheduler-server\r\n--basic to generate empty schema\r\nRun aqua validate to verify that the yaml file in the 'schema' directory is valid before scaffolding the API. The schema can (and should) be customized before scaffolding.\r\nRun aqua scaffold to scaffold API and models files based on any valid yaml files in the 'schema' directory. (If project is a workflow, cd into 'orchestrator' directory.)\r\nOptions:\r\n--force to force update on existing project\r\n--schema <path> to specify alternate path to schema files\r\n--backup to create a backup of current service files\r\nRun npm install to install dependencies (if not automatically installed during create)\r\nRun aqua start to start node server or aqua apidoc to start server \r\nopen http://localhost:8080/apidoc to see the API doc .\r\nNew to Node.js?\r\nThat's okay! We'll get you pointed in the right direction.\r\nPer nodejs.org:\r\n\"Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.\"\r\nMore simply put, Node.js allows us to quickly and efficiently run JavaScript code outside the browser, making it possible to use the same language on both the frontend and the backend.\r\nWhat OS do I need?\r\nNode.js will install on most major Operating systems. MacOSX, many flavors of Linux, and Windows are supported.\r\nNow, lets take a look at what OS you have. Please choose from the following for instructions on setting up Node.js:\r\nI have Mac OSX\r\nI have Linux\r\nI have Windows\r\nInstall on OSX\r\nUsing a package:\r\nSimply download Macintosh Installer.\r\nUsing homebrew:\r\nbrew install node\r\nUsing macports:\r\nport install nodejs\r\nInstall on Linux\r\nUbuntu, Mint\r\n Example install:\r\nsudo apt-get install python-software-properties python g++ make\r\ncurl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -\r\nsudo apt-get install -y nodejs\r\nIt installs current stable Node on the current stable Ubuntu. Quantal (12.10) users may need to install the software-properties-common package for the add-apt-repository command to work: sudo apt-get install software-properties-common\r\nThere is a naming conflict with the node package (Amateur Packet Radio Node Program), and the nodejs binary has been renamed from node to nodejs. You'll need to symlink /usr/bin/node to /usr/bin/nodejs or you could uninstall the Amateur Packet Radio Node Program to avoid that conflict.\r\nFedora\r\nNode.js and npm are available in Fedora 18 and later. Just use your favorite graphical package manager or run this on a terminal to install both npm and node:\r\nsudo yum install npm\r\nRHEL/CentOS/Scientific Linux 6\r\nNode.js and npm are available from the Fedora Extra Packages for Enterprise Linux (EPEL) testing repository. If you haven't already done so, first enable EPEL and then run the following command to install node and npm:\r\nsu -c 'yum --enablerepo=epel-testing install npm'\r\nArch Linux\r\n Node.js is available in the Community Repository.\r\npacman -S nodejs\r\nGentoo\r\n Node.js is available in official gentoo portage tree. You have to unmask it.\r\nemerge -aqv --autounmask-write nodejs\r\n etc-update\r\nemerge -aqv nodejs\r\nDebian, LMDE\r\nFor Debian sid (unstable), Node.js is available in the official repo.\r\nFor Debian Wheezy (stable), Node.js is available in wheezy-backports. To install backports, add this to your sources.list (/etc/apt/sources.list):\r\ndeb http://YOURMIRROR.debian.org/debian wheezy-backports main\r\nThen run:\r\napt-get update\r\napt-get install nodejs\r\nFor Debian Squeeze (oldstable), your best bet is to compile node by yourself (as root):\r\napt-get install python g++ make\r\nmkdir ~/nodejs && cd $_\r\nwget -N http://nodejs.org/dist/node-latest.tar.gz\r\ntar xzvf node-latest.tar.gz && cd `ls -rd node-v*`\r\n./configure\r\nmake install\r\nopenSUSE & SLE\r\nNode.js stable repos list. Also node.js is available in openSUSE:Factory repository.\r\nAvailable RPM packages for: openSUSE 11.4, 12.1, Factory and Tumbleweed; SLE 11 (with SP1 and SP2 variations).\r\nExample install on openSUSE 12.1:\r\nsudo zypper ar http://download.opensuse.org/repositories/devel:/languages:/nodejs/openSUSE_12.1/ NodeJSBuildService\r\nsudo zypper in nodejs nodejs-devel\r\nFreeBSD and OpenBSD\r\nNode.js is available through the ports system.\r\n/usr/ports/www/node\r\nDevelopment versions are also available using ports\r\ncd /usr/ports/www/node-devel/ && make install clean\r\nor packages on FreeBSD\r\npkg_add -r node-devel\r\nThe Node Package Manager is not installed along with Node.js by default on FreeBSD and will be needed for development and installing dependencies.\r\n/usr/ports/www/npm\r\nAlso note that FreeBSD 10 using clang will conflict with the occasional build scrpt (which assumes gcc) using node-gyp, and can be resolved by setting an envvar.\r\nCXX=c++\r\nInstall on Windows\r\nUsing a package:\r\nSimply download Windows Installer.\r\nUsing chocolatey to install Node:\r\ncinst nodejs\r\nor for full install with NPM:\r\ncinst nodejs.install\r\nOn to Aqua.Js!\r\nOnce Node.js is installed on your system, you can go ahead and install Aqua.Js.\r\n\r\nFeatures :\r\nStructure of a project\r\n Aqua keeps your code organized by splitting up the configuration, content+templates and routing logic into different places so that it's easy to keep track of everything and to easily swap out components. Let's start by looking at the base structure of the project you just created:\r\n/config  \r\nApplication configuration including environment-specific configs\r\n/constants\r\nConstant files to keep all the application business and other specific constants\r\n/controllers\r\ncontroller used to get all the request info and send back to service impl to get the other response\r\n/routes\r\nSpecify the applicaiton routes in this folder\r\n/data\r\nkeeps the constant data\r\n/error\r\nkeeps the error constants and list errors inside\r\n/Impl\r\nkeeps the implemenation files inside\r\n/schema\r\nschema is used to keep the yml apidoc structure\r\n/test\r\ntest is where all the test cases reside\r\n/utils\r\nutils keeps all application specific utillty \r\n/models\r\nmodel keeps all the application depenedant models together\r\n/public\r\nWeb resources that are publicly available\r\n server.js\r\nApplication entry point\r\nConfiguration\r\nAqua's configuration can be found in the config/config.json file.\r\n\r\nThis JSON file contains key value pairs that are loaded at runtime. The advantage of this is that all your application configuration is in a single, well-known place; and you can swap it out without having to touch a single line of code.\r\n\r\nThis config file is also where you can define middleware and specify it's load-order. To find out more, check out meddleware.\r\n\r\nThe configuration files are splitted into dev,qa,uat and prod and loaded based on the node_env environment variables. A common scenario is that development environments have slightly different parameters than production. Kraken allows you to define a second file config/development.json with alternate values.You can control which file is loaded by defining an environment variable: NODE_ENV and setting its value to production or development as appropriate. \r\nExample of a configuraition file\r\nRoutes:\r\nAqua moves the routing logic into separate files in the route  folder, allowing you to group routes by functionality. Along with this aqua provides one routeMapping.js to map all the routes to specific application context\r\nModels\r\nAqua separates data models from the controller logic, resulting in cleaner, more organized code. Data models live in the models folder.When a new controller is created, the framework will also create a simple model for you.While not very complex, this model serves as a base to build upon.  \r\nKindly go through all the other folder from Zip attached for rest application configuration.\r\nFeatures of Sails Js\r\n 100% JavaScript.\r\nLike other MVC frameworks, Aqua is built with an emphasis on developer happiness and a convention-over-configuration philosophy. But Node.js takes this principle to the next level. Building on top of Sails means your app is written entirely in JavaScript, the language you and your team are already using in the browser. Since you spend less time context-shifting, you're able to write code in a more consistent style, which makes development more productive and fun.\r\nPowerful associations.\r\nAqua  offers a new take on the familiar relational model, aimed at making data modeling more practical. You can do all the same things you might be used to (one-to-many, many-to-many), but you can also assign multiple named associations per-model (for instance, a cake might have two collections of people: \"havers\" and \"eaters\"). Better yet, you can assign different models to different databases, and your associations/joins will still work-- even across NoSQL and relational boundries. Aqua has no problem implicitly/automatically joining a MySQL table with a Mongo collection and vice versa.\r\n Auto-generate REST APIs.\r\nAqua comes with blueprints that help jumpstart your app's backend without writing any code.. Since these blueprint actions are built on the same underlying technology as Aqua, they also work with Websockets and any supported database out of the box.\r\nFront-end agnostic.\r\nWhile the promise of \"one language/framework to rule them all\" is certainly enticing, it isn't always realistic. Aqua is compatible with any front-end strategy; whether it's Angular, Backbone, iOS/ObjC, Android/Java, Windows Phone, or something else that hasn't been invented yet. Plus it's easy to serve up the same API to be consumed by another web service or community of developers.\r\nRock-solid foundation.\r\nAqua is built on Node.js, a popular, lightweight server-side technology that allows developers to write blazing fast, scalable network appliations in JavaScript. Aqua uses Express for handling HTTP requests, and wraps socket.io for managing WebSockets. So if your app ever needs to get really low-level, you can access the raw Express or socket.io objects. Another nice side-effect is that your existing Express routes work perfectly well in a aqau app, so migrating an existing Node app is a breeze.\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}